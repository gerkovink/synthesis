---
title: "Small simulation"
format: 
  html: 
    toc: true
---

```{r setup}
#| include: false
#| results: hide

# chunk settings
knitr::opts_chunk$set(
   message = FALSE,
   warning = FALSE,
   comment = NA,
   fig.align = "center")

# suppress ggplot warnings
options(warn = -1) 
```


# Load required packages

```{r warning=FALSE, message=FALSE}
library(mice)
library(dplyr)
library(ggmice)
library(magrittr)
library(purrr)
library(furrr)
library(ggplot2)

set.seed(123)
```

---

# Outline *idea*
If we assume that synthetic data generation went well[^1], then we would expect that any model would fit equally well if:

1. calculated on the original (true) data, and validated on synthetic sets. 
2. calculated on synthetic sets and validated on the original data. 

[^1]: Well is a relatively ambiguous term. But I mean that the data would be suitable for a large set of candidate analysis models. Which is not necessarily cf. Rubin. 

---

# Outline simulation

1. impute the `boys` data set with `m=1`
2. synthesize the imputed `boys` data set `m=5` times. Use `meth = "cart"`.
3. fit the model `lm(bmi ~ age + hgt + age:hgt + hc)` on the boys data set and on the synthetic sets independently. So 6 models. 
4. Apply all 6 models to the remaining 5 data sets and see if you can correctly predict `bmi` from the model build on another data set. `6x5x4x3x2x1`
5. calculate some interesting statistics. (mse/rmse? or any of the other prediction methods that predictors are always so fond of). 

---

# Impute boys to obtain comparative truth

```{r}
pred <- make.predictorMatrix(boys)
meth <- make.method(boys)
pred[c("hgt", "wgt"), "bmi"] <- 0
meth["bmi"] <- "~ I(wgt/(hgt/100)^2)"
imp <- mice(boys, 
            m=1, 
            maxit = 10,
            pred = pred, 
            meth = meth, 
            print = FALSE)
truth <- complete(imp)
```


---

# Synthesize 

```{r}
syn <- mice(truth, 
            meth = "cart", 
            m = 5, 
            maxit = 1, 
            print = FALSE,
            cp = 1e-12,
            minbucket = 2,
            where = matrix(TRUE, nrow(truth), ncol(truth))) %>% 
  complete("all")
```

---

# Fit models

```{r}
lm.truth <- truth %$% lm(bmi ~ age + hgt + age:hgt + hc)
lm.syn <- syn %>% 
  map(~.x %$% lm(bmi ~ age + hgt + age:hgt + hc)) %>% 
    setNames(paste0("syn", 1:5))

```

---

# Predicted vs. Original 

::: {.panel-tabset}

## syn1
```{r}
#| code-fold: true
#| layout-ncol: 2
#| fig.align: center
#| results: hide
#| fig-width: 4
#| fig-height: 4

# add truth to the list of synthetic values
full <- syn %>% 
  append(list(truth)) %>% 
  setNames(c(paste0("syn", 1:5), "truth"))

# extract bmi values
bmis <- syn %>% 
  map(~ .x$bmi
        ) %>% 
  append(list(truth$bmi)) %>% 
  setNames(c(paste0("syn", 1:5), "truth"))

# then compare the predictions
res <- expand.grid(full, lm.syn) %>% 
  transmute(predicted = pmap(list(Var1, Var2), 
                       function(Var1, Var2) unname(predict(Var2, newdata = Var1)))) %>% 
  mutate(original = rep(bmis, 5)) %>% 
    set_rownames(paste("syn", rep(1:5,each=6), "- predicted:", names(.$predicted))) 

# (do I want to specify the x-lim/y-lim on their min/max values?)
res %>% 
  tidyr::unnest(c(predicted, original)) %>%  
  summarize_all(list(min, max))
  

# plot the predictions against original values of bmi
plots1 <- res %>% 
  apply(1, function(x) data.frame(predicted = unlist(x$predicted), original = unlist(x$original))) %>%
  imap(
    ~ggplot(.x, aes(x = original, y = predicted)) +
      geom_point(col="skyblue", alpha =0.5) +
      geom_abline(intercept = 0, slope = 1, col = "#000099", lty=2) + 
      labs(subtitle = .y) +
      # set the y/x-lims?
      # ylim(min(.x$predicted), max(.x$predicted)) + 
      # xlim(min(.x$original), max(.x$original)) +
      ylim(13, 25) +  # min(res) & max(res)
      xlim(11, 32) +
      theme_classic()
  )


plots1[stringr::str_detect(names(plots1), "syn 1")]
# # combine six random plots 
# ggpubr::ggarrange(plotlist = sample(plots1, 6) , nrow = 2, ncol=3)
```

## syn2
```{r}
#| code-fold: true
#| layout-ncol: 2
#| fig.align: center
#| results: hide
#| fig-width: 4
#| fig-height: 4

plots1[stringr::str_detect(names(plots1), "syn 2")]
```

## syn3
```{r}
#| code-fold: true
#| layout-ncol: 2
#| fig.align: center
#| results: hide
#| fig-width: 4
#| fig-height: 4

plots1[stringr::str_detect(names(plots1), "syn 3")]
```

## syn4
```{r}
#| code-fold: true
#| layout-ncol: 2
#| fig.align: center
#| results: hide
#| fig-width: 4
#| fig-height: 4

plots1[stringr::str_detect(names(plots1), "syn 4")]
```

## syn5
```{r}
#| code-fold: true
#| layout-ncol: 2
#| fig.align: center
#| results: hide
#| fig-width: 4
#| fig-height: 4

plots1[stringr::str_detect(names(plots1), "syn 5")]
```

:::


# LM plots
```{r}
#| fig.align: center
#| fig.width: 5.5
#| layout-ncol: 2

# source the plotting function
source("fnc.R")

# example plot 1
synplot1(full, bmi~age)

# example plot 2
synplot1(full, age ~ hgt)

# example plot 3
synplot1(full, age ~ hc)

# example plot 4
synplot1(syn, age ~ wgt)

# example plot 5
synplot1(list(full$syn1, full$syn3, full$truth), bmi ~ age)
```


# Fitted vs Observed plots
```{r}
#| fig.align: center
#| fig.width: 5.5
#| layout-ncol: 2


# example plot 1
full %>% 
  map(~.x %$% lm(age ~ bmi + hc)) %>% 
  synplot2()

# example plot 2
full %>% 
  map(~.x %$% lm(bmi~ age + hc)) %>% 
  synplot2(smoother = "loess")

# example plot 3
full %>% 
  map(~.x %$% lm(age ~ wgt + hc)) %>% 
  synplot2(smoother = "loess")

# example plot 4
full %>% 
  map(~.x %$% lm(age ~ hgt + hc)) %>% 
  synplot2()
```


---

# RMSE

```{r}
rmse <- res %>% 
  apply(1, function(x) data.frame(predicted = unlist(x$predicted), original = unlist(x$original))) %>% 
  map(~ sqrt(mean((.x$predicted - .x$original)^2))
        ) %>% unlist()

rmse %>% knitr::kable(col.names="RMSE") 

```

# Bad model
```{r}
truth2 <- mice(mammalsleep) %>% complete(1)
syn2 <- mice(truth2, 
            meth = "cart", 
            m = 5, 
            maxit = 1, 
            print = FALSE,
            cp = 1e-12,
            minbucket = 2,
            where = matrix(TRUE, 
                           nrow(truth2),
                           ncol(truth2))) %>%
  complete("all")

full2 <- syn2 %>% 
  append(list(truth2)) %>% 
  setNames(c(paste0("syn", 1:5), "truth"))

full2 %>% 
  map(~.x %$% lm(sws ~ log10(bw) + odi)) %>% 
  synplot2()

set.seed(124)
imp <- mammalsleep %>% mice(print=FALSE) 

imp %>% complete("all") %>% map(~.x %$% lm(sws ~ log10(bw) + odi)) %>% pool()
plot1 <- synplot2({complete(imp, "all") %>% map(~.x %$% lm(sws ~ log10(bw) + odi))}, smoother = "lm")

set.seed(123)
imp <- mammalsleep %>% mice(print=FALSE) 

imp %>% complete("all") %>% map(~.x %$% lm(sws ~ log10(bw) + odi)) %>% pool()
plot2 <- synplot2({complete(imp, "all") %>% map(~.x %$% lm(sws ~ log10(bw) + odi))}, smoother = "lm")
plot1
plot2

imp <- mammalsleep %>% mice(print=FALSE, meth = "mean") 
imp %>% complete("all") %>% map(~.x %$% lm(sws ~ log10(bw) + odi)) %>% pool()
plot3 <- synplot2({complete(imp, "all") %>% map(~.x %$% lm(sws ~ log10(bw) + odi))}, smoother = "lm")
plot3
```



```{r}
sessionInfo()
```

